This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-03T23:07:49.780Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
components/
  LeaderboardScreen.tsx
data/
  mockData.ts
services/
  leaderboardService.ts
styles/
  LeaderboardScreen.styles.ts
types/
  leaderboard.ts

================================================================
Repository Files
================================================================

================
File: components/LeaderboardScreen.tsx
================
import React, { useEffect, useState } from 'react';
import { View, Text, ScrollView, RefreshControl, Image } from 'react-native';
import { useTheme, ActivityIndicator, SegmentedButtons } from 'react-native-paper';
import { Card } from '../../../components/common/atoms/Card';
import { Button } from '../../../components/common/atoms/Button';
import { useAuth } from '../../../context/AuthContext';
import leaderboardService, { LeaderboardEntry } from '../services/leaderboardService';
import { createStyles } from '../styles/LeaderboardScreen.styles';
import { formatDistance } from '../../../core/utils/formatting';

type PeriodType = 'daily' | 'weekly';

export const LeaderboardScreen: React.FC = () => {
  const [leaderboardData, setLeaderboardData] = useState<LeaderboardEntry[]>([]);
  const [periodType, setPeriodType] = useState<PeriodType>('daily');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const theme = useTheme();
  const styles = createStyles(theme);
  const { user } = useAuth();

  const fetchData = async () => {
    try {
      setError(null);
      setLoading(true);
      
      const today = new Date().toISOString().split('T')[0];
      let data: LeaderboardEntry[];
      
      if (periodType === 'daily') {
        data = await leaderboardService.getLeaderboard(today);
      } else {
        // Get weekly data (last 7 days)
        const endDate = today;
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 7);
        data = await leaderboardService.getWeeklyLeaderboard(
          startDate.toISOString().split('T')[0],
          endDate
        );
      }

      setLeaderboardData(data);
    } catch (error) {
      console.error('Error fetching leaderboard:', error);
      setError('Failed to fetch leaderboard data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [user, periodType]);

  const [refreshing, setRefreshing] = useState(false);

  const onRefresh = React.useCallback(async () => {
    setRefreshing(true);
    await fetchData();
    setRefreshing(false);
  }, [periodType]);


  if (loading && !refreshing) {
    return (
      <View style={[styles.container, styles.centered]}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={[styles.loadingText, { marginTop: 16 }]}>
          Loading leaderboard...
        </Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <SegmentedButtons
        value={periodType}
        onValueChange={(value) => setPeriodType(value as PeriodType)}
        buttons={[
          { value: 'daily', label: 'Daily' },
          { value: 'weekly', label: 'Weekly' }
        ]}
        style={styles.periodSelector}
      />

      <ScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
      {leaderboardData.map((entry) => (
        <Card key={entry.user_id} style={[
          styles.entryContainer,
          user?.id === entry.user_id && styles.currentUserEntry
        ]}>
          <View style={styles.rankContainer}>
            <Text style={[
              styles.rankText,
              entry.rank !== undefined && entry.rank <= 3 ? styles.topThreeRank : undefined
            ]}>
              #{entry.rank ?? '-'}
            </Text>
          </View>
          <View style={styles.userContainer}>
            {entry.photo_url && (
              <Image
                source={{ uri: entry.photo_url }}
                style={styles.avatar}
              />
            )}
            <View style={styles.userInfo}>
              <Text style={[
                styles.nameText,
                user?.id === entry.user_id && styles.currentUserText
              ]}>
                {entry.display_name}
                {user?.id === entry.user_id && ' (You)'}
              </Text>
              <View style={styles.statsRow}>
                <Text style={styles.scoreText}>Score: {entry.score}</Text>
                <Text style={styles.metricsText}>
                  Steps: {entry.steps.toLocaleString()} â€¢ Distance: {formatDistance(entry.distance, 'metric')}
                </Text>
              </View>
            </View>
          </View>
        </Card>
      ))}
      </ScrollView>
    </View>
  );
};

================
File: data/mockData.ts
================
import { LeaderboardEntry } from '../types/leaderboard';

const MOCK_AVATARS = [
  'https://i.pravatar.cc/150?img=47',
  'https://i.pravatar.cc/150?img=32',
  'https://i.pravatar.cc/150?img=28',
  'https://i.pravatar.cc/150?img=15',
  'https://i.pravatar.cc/150?img=56',
  'https://i.pravatar.cc/150?img=12',
  'https://i.pravatar.cc/150?img=23',
  'https://i.pravatar.cc/150?img=35',
  'https://i.pravatar.cc/150?img=41',
  'https://i.pravatar.cc/150?img=52',
];

const MOCK_NAMES = [
  'Sarah Johnson',
  'Michael Chen',
  'Emma Wilson',
  'James Rodriguez',
  'Lisa Thompson',
  'David Park',
  'Maria Garcia',
  'Alex Turner',
  'Rachel Kim',
  'Omar Hassan',
];

interface UserData {
  id: string;
  name: string;
  avatarUrl?: string;
  metrics: {
    steps: number;
    distance: number;
  };
  score: number;
}

export const generateMockLeaderboardData = (userData: UserData): LeaderboardEntry[] => {
  // Generate mock competitors with varying scores around the user's score
  const baseEntries: LeaderboardEntry[] = MOCK_NAMES.map((name, index) => {
    // Create some variance in scores but keep them relatively close to user's score
    const scoreVariance = Math.random() * 20 - 10; // Random number between -10 and 10
    const competitorScore = Math.max(0, Math.min(100, userData.score + scoreVariance));
    
    return {
      id: `mock-${index + 2}`, // Start from 2 since user will be 1
      name,
      avatarUrl: MOCK_AVATARS[index],
      metrics: {
        steps: Math.round(competitorScore * 100), // Scale steps based on score
        distance: Number((competitorScore * 0.1).toFixed(1)), // Scale distance based on score
      },
      score: {
        overall: Math.round(competitorScore),
        categories: {
          steps: Math.round(competitorScore * 0.9),
          distance: Math.round(competitorScore * 0.95),
        },
        bonusPoints: Math.round(Math.random() * 10), // Random bonus points 0-10
      },
      rank: 0, // Will be calculated after sorting
    };
  });

  // Create user entry using actual user data
  const userEntry: LeaderboardEntry = {
    id: userData.id,
    name: userData.name,
    avatarUrl: userData.avatarUrl || 'https://i.pravatar.cc/150?img=68', // Fallback avatar
    metrics: {
      steps: userData.metrics.steps,
      distance: userData.metrics.distance,
    },
    score: {
      overall: userData.score,
      categories: {
        steps: Math.round(userData.score * 0.9),
        distance: Math.round(userData.score * 0.95),
      },
      bonusPoints: 5,
    },
    rank: 0,
  };

  // Combine and sort entries
  const allEntries = [userEntry, ...baseEntries];
  const sortedEntries = allEntries.sort((a, b) => b.score.overall - a.score.overall);

  // Assign ranks based on sorted position
  return sortedEntries.map((entry, index) => ({
    ...entry,
    rank: index + 1,
  }));
};

================
File: services/leaderboardService.ts
================
import { supabase } from '../../../utils/supabase';

import { PrivacyLevel } from '../../../core/types/base';

interface UserProfile {
  display_name: string;
  photo_url: string | null;
  settings: {
    privacyLevel: PrivacyLevel;
  };
}

interface HealthMetric {
  user_id: string;
  steps: number;
  distance: number;
  score: number;
  users: UserProfile | null;
}

interface WeeklyHealthMetric {
  user_id: string;
  steps: number;
  distance: number;
  score: number;
  users: UserProfile | null;
}

interface HealthMetricScore {
  user_id: string;
  score: number;
  users: UserProfile | null;
}

export interface LeaderboardEntry {
  user_id: string;
  display_name: string;
  photo_url: string | null;
  steps: number;
  distance: number;
  score: number;
  rank?: number;
}

class LeaderboardService {
  constructor() {}

  public async getLeaderboard(date: string): Promise<LeaderboardEntry[]> {
    // Use the same pattern as weekly leaderboard for consistency
    const { data, error } = await supabase
      .rpc('get_daily_leaderboard', {
        target_date: date
      });

    if (error) throw error;
    if (!data) return [];

    return data.map((entry: HealthMetric, index: number) => ({
      user_id: entry.user_id,
      display_name: entry.users?.display_name || 'Unknown User',
      photo_url: entry.users?.photo_url || null,
      steps: entry.steps || 0,
      distance: entry.distance || 0,
      score: entry.score || 0,
      rank: index + 1
    }));
  }

  public async getUserRank(userId: string, date: string): Promise<number | null> {
    const { data, error } = await supabase
      .rpc('get_user_rank', {
        user_uuid: userId,
        target_date: date
      });

    if (error) throw error;
    return data;
  }

  public async getWeeklyLeaderboard(startDate: string, endDate: string): Promise<LeaderboardEntry[]> {
    const { data, error } = await supabase
      .rpc('get_weekly_leaderboard', {
        start_date: startDate,
        end_date: endDate
      });

    if (error) throw error;
    if (!data) return [];

    // Map the data to LeaderboardEntry format
    return data.map((entry: WeeklyHealthMetric, index: number) => ({
      user_id: entry.user_id,
      display_name: entry.users?.display_name || 'Unknown User',
      photo_url: entry.users?.photo_url || null,
      steps: entry.steps || 0,
      distance: entry.distance || 0,
      score: entry.score || 0,
      rank: index + 1
    }));
  }
}

export default new LeaderboardService();

================
File: styles/LeaderboardScreen.styles.ts
================
import { StyleSheet } from 'react-native';
import { MD3Theme } from 'react-native-paper';
import { spacing } from '../../../components/common/theme/spacing';

export const createStyles = (theme: MD3Theme) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
    padding: spacing.lg,
  },
  centered: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  periodSelector: {
    marginBottom: spacing.lg,
  },
  statsCard: {
    marginBottom: spacing.lg,
    padding: spacing.md,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: spacing.md,
  },
  statItem: {
    alignItems: 'center',
  },
  statLabel: {
    fontSize: 12,
    color: theme.colors.onSurfaceVariant,
    marginBottom: spacing.xs,
  },
  statValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: theme.colors.onSurface,
  },
  achievementsContainer: {
    marginTop: spacing.md,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: theme.colors.onSurface,
    marginBottom: spacing.sm,
  },
  achievementChip: {
    marginRight: spacing.sm,
    backgroundColor: theme.colors.secondaryContainer,
  },
  entryContainer: {
    flexDirection: 'row',
    padding: spacing.md,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.outline,
    alignItems: 'center',
    marginBottom: spacing.sm,
  },
  currentUserEntry: {
    backgroundColor: theme.colors.primaryContainer,
    borderRadius: 8,
  },
  rankContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: theme.colors.surfaceVariant,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: spacing.md,
  },
  rankText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: theme.colors.onSurfaceVariant,
  },
  topThreeRank: {
    color: theme.colors.primary,
    fontWeight: '800',
  },
  userContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: spacing.md,
  },
  userInfo: {
    flex: 1,
  },
  nameText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: theme.colors.onSurface,
    marginBottom: 4,
  },
  currentUserText: {
    color: theme.colors.primary,
  },
  statsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  scoreText: {
    fontSize: 14,
    color: theme.colors.primary,
    fontWeight: '500',
  },
  streakChip: {
    backgroundColor: theme.colors.tertiaryContainer,
    marginLeft: spacing.sm,
  },
  errorText: {
    color: theme.colors.error,
    textAlign: 'center',
  },
  loadingText: {
    color: theme.colors.onSurface,
    marginTop: spacing.md,
  },
  metricsText: {
    fontSize: 12,
    color: theme.colors.onSurfaceVariant,
    marginLeft: spacing.sm,
  },
});

================
File: types/leaderboard.ts
================
export interface LeaderboardMetrics {
  steps: number;
  distance: number;
}

export interface CategoryScores {
  steps: number;
  distance: number;
}

export interface UserScore {
  overall: number;
  categories: CategoryScores;
  bonusPoints: number;
}

export interface LeaderboardEntry {
  id: string;
  name: string;
  avatarUrl: string;
  metrics: LeaderboardMetrics;
  score: UserScore;
  rank: number;
}

export interface LeaderboardState {
  entries: LeaderboardEntry[];
  isLoading: boolean;
  error: string | null;
  selectedEntry: string | null;
}
