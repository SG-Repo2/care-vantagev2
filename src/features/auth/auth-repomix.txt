This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-03T23:06:05.533Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
components/
  LoginScreen.tsx
  RegisterScreen.tsx
services/
  authService.ts
styles/
  LoginScreen.styles.ts
  RegisterScreen.styles.ts
types/
  auth.ts

================================================================
Repository Files
================================================================

================
File: components/LoginScreen.tsx
================
import React, { useState } from 'react';
import { View, StyleSheet } from 'react-native';
import { TextInput, Text, useTheme } from 'react-native-paper';
import { StackNavigationProp } from '@react-navigation/stack';
import { AuthStackParamList } from '../../../navigation/types';
import { useAuth } from '../../../context/AuthContext';
import { Button } from '../../../components/common/atoms/Button';
import { spacing } from '../../../components/common/theme/spacing';
import { createStyles } from '../styles/LoginScreen.styles';

type LoginScreenProps = {
  navigation: StackNavigationProp<AuthStackParamList, 'Login'>;
};

export const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [localError, setLocalError] = useState<string | null>(null);
  const { signInWithGoogle, error: authError, isLoading } = useAuth();
  const theme = useTheme();

  const handleLogin = async () => {
    if (!email || !password) {
      setLocalError('Please enter both email and password');
      return;
    }
    setLocalError(null);
    // Email/password login not implemented in this version
    setLocalError('Email/password login is not available. Please use Google Sign-In.');
  };

  const handleGoogleSignIn = async () => {
    setLocalError(null);
    try {
      await signInWithGoogle();
    } catch (err) {
      console.error('Google sign-in error:', err);
      setLocalError('Failed to sign in with Google. Please try again.');
    }
  };

  const error = localError || authError;

  const styles = createStyles(theme);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome Back</Text>

      <TextInput
        label="Email"
        value={email}
        onChangeText={(text) => {
          setEmail(text);
          setLocalError(null);
        }}
        mode="outlined"
        style={styles.input}
        autoCapitalize="none"
        keyboardType="email-address"
        disabled={isLoading}
      />
      
      <TextInput
        label="Password"
        value={password}
        onChangeText={(text) => {
          setPassword(text);
          setLocalError(null);
        }}
        mode="outlined"
        style={styles.input}
        secureTextEntry
        disabled={isLoading}
      />

      {error && (
        <Text style={styles.errorText}>{error}</Text>
      )}

      <Button
        variant="primary"
        size="large"
        onPress={handleLogin}
        loading={isLoading}
        disabled={isLoading || !email || !password}
        fullWidth
        style={styles.button}
      >
        Sign In
      </Button>

      <Button
        variant="outline"
        size="large"
        onPress={handleGoogleSignIn}
        loading={isLoading}
        disabled={isLoading}
        icon="google"
        fullWidth
        style={styles.button}
      >
        Sign in with Google
      </Button>

      <Button
        variant="text"
        size="medium"
        onPress={() => navigation.navigate('Register')}
        disabled={isLoading}
        fullWidth
        style={styles.button}
      >
        Don't have an account? Register
      </Button>
    </View>
  );
};

================
File: components/RegisterScreen.tsx
================
import React, { useState } from 'react';
import { View } from 'react-native';
import { Text, useTheme } from 'react-native-paper';
import { StackNavigationProp } from '@react-navigation/stack';
import { AuthStackParamList } from '../../../navigation/types';
import { useAuth } from '../../../context/AuthContext';
import { Button } from '../../../components/common/atoms/Button';
import { createStyles } from '../styles/RegisterScreen.styles';

type RegisterScreenProps = {
  navigation: StackNavigationProp<AuthStackParamList, 'Register'>;
};

export const RegisterScreen: React.FC<RegisterScreenProps> = ({ navigation }) => {
  const [localError, setLocalError] = useState<string | null>(null);
  const { signInWithGoogle, error: authError, isLoading } = useAuth();
  const theme = useTheme();

  const handleGoogleSignIn = async () => {
    setLocalError(null);
    try {
      await signInWithGoogle();
    } catch (err) {
      console.error('Google sign-in error:', err);
      setLocalError('Failed to sign in with Google. Please try again.');
    }
  };

  const error = localError || authError;

  const styles = createStyles(theme);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Create Account</Text>
      
      <Text style={styles.subtitle}>
        Create an account quickly and easily using your Google account
      </Text>

      {error && (
        <Text style={styles.errorText}>{error}</Text>
      )}

      <Button
        variant="primary"
        size="large"
        onPress={handleGoogleSignIn}
        loading={isLoading}
        disabled={isLoading}
        icon="google"
        fullWidth
        style={styles.button}
      >
        Sign up with Google
      </Button>

      <Button
        variant="text"
        size="medium"
        onPress={() => navigation.navigate('Login')}
        disabled={isLoading}
        fullWidth
        style={styles.button}
      >
        Already have an account? Sign in
      </Button>
    </View>
  );
};

================
File: services/authService.ts
================
import { supabase } from '../../../utils/supabase';
import { User as SupabaseUser } from '@supabase/supabase-js';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { User, mapSupabaseUser } from '../types/auth';

class AuthService {
  private static instance: AuthService;
  private currentUser: User | null = null;
  private listeners: Set<(user: User | null) => void> = new Set();

  private constructor() {
    this.initializeAuth();
  }

  private async initializeAuth() {
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      this.currentUser = await this.createAppUserFromSupabaseUser(session.user);
      this.notifyListeners();
    }

    supabase.auth.onAuthStateChange(async (event, session) => {
      if (session?.user) {
        const appUser = await this.createAppUserFromSupabaseUser(session.user);
        this.currentUser = appUser;
      } else {
        this.currentUser = null;
      }
      this.notifyListeners();
    });
  }

  private async createAppUserFromSupabaseUser(supabaseUser: SupabaseUser): Promise<User> {
    const { data: profile } = await supabase
      .from('users')
      .select('*')
      .eq('id', supabaseUser.id)
      .single();

    if (!profile) {
      const newProfile = {
        id: supabaseUser.id,
        email: supabaseUser.email!,
        display_name: supabaseUser.user_metadata.full_name || supabaseUser.email!.split('@')[0],
        photo_url: supabaseUser.user_metadata.avatar_url,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        auth_provider: 'google',
        settings: {
          measurementSystem: 'metric',
          notifications: true,
          privacyLevel: 'private'
        }
      };

      const { error } = await supabase.from('users').insert([newProfile]);
      if (error) throw error;

      return mapSupabaseUser(supabaseUser);
    }

    return mapSupabaseUser(supabaseUser);
  }

  public static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  public async signInWithGoogle(idToken: string): Promise<void> {
    try {
      const { data, error } = await supabase.auth.signInWithIdToken({
        provider: 'google',
        token: idToken,
        nonce: undefined, // Let Supabase handle the nonce
      });

      if (error) throw error;
      
      if (data.user) {
        this.currentUser = await this.createAppUserFromSupabaseUser(data.user);
        this.notifyListeners();
      } else {
        throw new Error('No user data returned from authentication');
      }
    } catch (error) {
      console.error('Supabase auth error:', error);
      throw error;
    }
  }

  public async signOut(): Promise<void> {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
    this.currentUser = null;
    this.notifyListeners();
    await AsyncStorage.clear();
  }

  public getCurrentUser(): User | null {
    return this.currentUser;
  }

  public addAuthStateListener(listener: (user: User | null) => void): () => void {
    this.listeners.add(listener);
    return () => {
      this.listeners.delete(listener);
    };
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.currentUser));
  }
}

export default AuthService.getInstance();

================
File: styles/LoginScreen.styles.ts
================
import { StyleSheet } from 'react-native';
import { MD3Theme } from 'react-native-paper';
import { spacing } from '../../../components/common/theme/spacing';

export const createStyles = (theme: MD3Theme) => StyleSheet.create({
  container: {
    flex: 1,
    padding: spacing.xl,
    backgroundColor: theme.colors.background,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: spacing.xl,
    color: theme.colors.onBackground,
    textAlign: 'center',
  },
  input: {
    marginBottom: spacing.md,
  },
  errorText: {
    fontSize: 14,
    color: theme.colors.error,
    marginBottom: spacing.md,
    textAlign: 'center',
  },
  button: {
    marginBottom: spacing.sm,
  },
});

================
File: styles/RegisterScreen.styles.ts
================
import { StyleSheet } from 'react-native';
import { MD3Theme } from 'react-native-paper';
import { spacing } from '../../../components/common/theme/spacing';

export const createStyles = (theme: MD3Theme) => StyleSheet.create({
  container: {
    flex: 1,
    padding: spacing.xl,
    backgroundColor: theme.colors.background,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: spacing.xl,
    color: theme.colors.onBackground,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    marginBottom: spacing.xl,
    color: theme.colors.onBackground,
    textAlign: 'center',
    opacity: 0.7,
  },
  errorText: {
    fontSize: 14,
    color: theme.colors.error,
    marginBottom: spacing.md,
    textAlign: 'center',
  },
  button: {
    marginBottom: spacing.sm,
  },
});

================
File: types/auth.ts
================
import { User as SupabaseUser } from '@supabase/supabase-js';

export type User = {
  id: string;
  email: string;
  displayName?: string;
  photoURL?: string;
  lastSignOutAt?: string;
  createdAt?: string;
  updatedAt?: string;
};

export const mapSupabaseUser = (user: SupabaseUser): User => ({
  id: user.id,
  email: user.email || '',
  displayName: user.user_metadata?.full_name,
  photoURL: user.user_metadata?.avatar_url,
  createdAt: user.created_at,
  updatedAt: user.updated_at,
  lastSignOutAt: user.last_sign_in_at,
});

export type AuthState = {
  isAuthenticated: boolean;
  user: User | null;
  isLoading: boolean;
  error: string | null;
};

export type AuthContextType = AuthState & {
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string) => Promise<void>;
  signInWithGoogle: () => Promise<void>;
  logout: () => Promise<void>;
};
